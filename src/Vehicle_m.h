//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Vehicle.msg.
//

#ifndef __VEHICLE_M_H
#define __VEHICLE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Vehicle;
/**
 * Class generated from <tt>Vehicle.msg:16</tt> by opp_msgtool.
 * <pre>
 * message Vehicle
 * {
 *     string srcEndpoint;
 *     string dstEndpoint;
 *     unsigned int vehNumber;
 * 
 *     simtime_t enterTime;
 *     simtime_t totalTransitTime;
 * 
 *     simtime_t queueEnterTime;
 *     simtime_t queueWaitingTime;
 * 
 *     simtime_t queueExitTime;
 *     simtime_t drivingTime;
 * 
 *     unsigned int hopCount;
 * 
 * 
 * }
 * </pre>
 */
class Vehicle : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string srcEndpoint;
    omnetpp::opp_string dstEndpoint;
    unsigned int vehNumber = 0;
    omnetpp::simtime_t enterTime = SIMTIME_ZERO;
    omnetpp::simtime_t totalTransitTime = SIMTIME_ZERO;
    omnetpp::simtime_t queueEnterTime = SIMTIME_ZERO;
    omnetpp::simtime_t queueWaitingTime = SIMTIME_ZERO;
    omnetpp::simtime_t queueExitTime = SIMTIME_ZERO;
    omnetpp::simtime_t drivingTime = SIMTIME_ZERO;
    unsigned int hopCount = 0;

  private:
    void copy(const Vehicle& other);

  protected:
    bool operator==(const Vehicle&) = delete;

  public:
    Vehicle(const char *name=nullptr, short kind=0);
    Vehicle(const Vehicle& other);
    virtual ~Vehicle();
    Vehicle& operator=(const Vehicle& other);
    virtual Vehicle *dup() const override {return new Vehicle(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSrcEndpoint() const;
    virtual void setSrcEndpoint(const char * srcEndpoint);

    virtual const char * getDstEndpoint() const;
    virtual void setDstEndpoint(const char * dstEndpoint);

    virtual unsigned int getVehNumber() const;
    virtual void setVehNumber(unsigned int vehNumber);

    virtual omnetpp::simtime_t getEnterTime() const;
    virtual void setEnterTime(omnetpp::simtime_t enterTime);

    virtual omnetpp::simtime_t getTotalTransitTime() const;
    virtual void setTotalTransitTime(omnetpp::simtime_t totalTransitTime);

    virtual omnetpp::simtime_t getQueueEnterTime() const;
    virtual void setQueueEnterTime(omnetpp::simtime_t queueEnterTime);

    virtual omnetpp::simtime_t getQueueWaitingTime() const;
    virtual void setQueueWaitingTime(omnetpp::simtime_t queueWaitingTime);

    virtual omnetpp::simtime_t getQueueExitTime() const;
    virtual void setQueueExitTime(omnetpp::simtime_t queueExitTime);

    virtual omnetpp::simtime_t getDrivingTime() const;
    virtual void setDrivingTime(omnetpp::simtime_t drivingTime);

    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Vehicle& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Vehicle& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Vehicle *fromAnyPtr(any_ptr ptr) { return check_and_cast<Vehicle*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEHICLE_M_H

